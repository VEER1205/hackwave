<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Futuro AI Assistant</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      :root {
        --primary-bg: #0a0a0f;
        --secondary-bg: #1e1e2e;
        --tertiary-bg: #2a2a3a;
        --accent-primary: #00aaff;
        --accent-secondary: #00d4ff;
        --accent-tertiary: #0077cc;
        --text-primary: #e8e8f0;
        --text-secondary: #b8b8c8;
        --text-muted: #888899;
        --border-color: #00aaff;
        --glass-bg: rgba(15, 15, 25, 0.85);
        --glass-border: rgba(0, 170, 255, 0.25);
        --gradient-start: #001a33;
        --gradient-end: #004d99;
        --accent-gradient: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        --shadow-primary: 0 4px 20px rgba(0, 170, 255, 0.15);
        --shadow-secondary: 0 0 40px rgba(0, 170, 255, 0.4);
        --shadow-hover: 0 0 25px rgba(0, 170, 255, 0.8);
        --input-focus: 0 0 15px rgba(0, 170, 255, 0.8);
        --social-hover-bg: rgba(0, 170, 255, 0.1);
        --nav-hover-bg: rgba(0, 170, 255, 0.1);
        --nav-active-bg: rgba(0, 170, 255, 0.15);
        --error-color: #ff4757;
        --success-color: #2ed573;
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: radial-gradient(
          ellipse at top,
          #001133 0%,
          #000511 30%,
          #000000 70%
        );
        background-attachment: fixed;
        color: var(--text-primary);
        line-height: 1.6;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        position: relative;
      }

      /* Enhanced animated background elements */
      .bg-decoration {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -2;
        overflow: hidden;
      }

      .bg-particle {
        position: absolute;
        border-radius: 50%;
        opacity: 0.05;
        animation: particleFloat 15s infinite linear;
      }

      .bg-particle:nth-child(1) {
        width: 200px;
        height: 200px;
        background: radial-gradient(
          circle,
          var(--accent-primary),
          transparent 70%
        );
        top: 15%;
        left: 10%;
        animation-delay: 0s;
        animation-duration: 20s;
      }

      .bg-particle:nth-child(2) {
        width: 300px;
        height: 300px;
        background: radial-gradient(
          circle,
          var(--accent-secondary),
          transparent 60%
        );
        top: 50%;
        right: 15%;
        animation-delay: -8s;
        animation-duration: 25s;
      }

      .bg-particle:nth-child(3) {
        width: 150px;
        height: 150px;
        background: radial-gradient(
          circle,
          var(--accent-tertiary),
          transparent 80%
        );
        bottom: 25%;
        left: 25%;
        animation-delay: -15s;
        animation-duration: 18s;
      }

      .bg-particle:nth-child(4) {
        width: 250px;
        height: 250px;
        background: radial-gradient(circle, #0099cc, transparent 65%);
        top: 30%;
        left: 60%;
        animation-delay: -5s;
        animation-duration: 22s;
      }

      .bg-particle:nth-child(5) {
        width: 180px;
        height: 180px;
        background: radial-gradient(
          circle,
          var(--accent-primary),
          transparent 75%
        );
        bottom: 15%;
        right: 30%;
        animation-delay: -12s;
        animation-duration: 19s;
      }

      /* Grid overlay for tech feel */
      .bg-grid {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: linear-gradient(
            rgba(0, 170, 255, 0.03) 1px,
            transparent 1px
          ),
          linear-gradient(
            90deg,
            rgba(0, 170, 255, 0.03) 1px,
            transparent 1px
          );
        background-size: 40px 40px;
        pointer-events: none;
        z-index: -1;
      }

      @keyframes particleFloat {
        0%,
        100% {
          transform: translateY(0px) translateX(0px) rotate(0deg) scale(1);
        }
        25% {
          transform: translateY(-30px) translateX(20px) rotate(90deg) scale(1.1);
        }
        50% {
          transform: translateY(-15px) translateX(-15px) rotate(180deg)
            scale(0.9);
        }
        75% {
          transform: translateY(25px) translateX(-30px) rotate(270deg)
            scale(1.05);
        }
      }

      /* Subtle scanning line effect */
      .scan-line {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(
          90deg,
          transparent,
          var(--accent-primary),
          transparent
        );
        animation: scanLine 8s infinite;
        z-index: -1;
        opacity: 0.2;
      }

      @keyframes scanLine {
        0% {
          top: -2px;
        }
        100% {
          top: 100vh;
        }
      }

      /* --- NAVBAR STYLES START --- */
      .navbar {
        background: var(--glass-bg);
        backdrop-filter: blur(25px);
        border-bottom: 1px solid var(--glass-border);
        padding: 16px 24px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: var(--shadow-primary);
        position: sticky;
        top: 0;
        z-index: 100;
        transition: var(--transition);
      }

      .nav-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
      }

      .nav-logo-container {
        display: flex;
        align-items: center;
        gap: 16px;
      }

      .logo {
        width: 40px;
        height: 40px;
      }

      .title {
        font-size: 20px;
        font-weight: 600;
        color: var(--text-primary);
        background: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .nav-menu {
        display: flex;
        gap: 2rem;
        align-items: center;
      }

      .nav-link {
        color: var(--text-secondary);
        text-decoration: none;
        font-weight: 500;
        transition: var(--transition);
        position: relative;
        padding: 0.5rem 0;
      }
      .nav-link:hover,
      .nav-link.active {
        color: var(--accent-primary);
      }
      .nav-link::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 0;
        height: 2px;
        background: var(--accent-gradient);
        transition: var(--transition);
      }
      .nav-link:hover::after,
      .nav-link.active::after {
        width: 100%;
      }

      .nav-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .mobile-toggle {
        display: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: var(--text-primary);
      }

      .btn-primary,
      .btn-secondary {
        padding: 0.625rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        border: none;
        font-size: 0.95rem;
      }

      .btn-primary {
        background: var(--accent-gradient);
        color: white;
        box-shadow: 0 0 20px rgba(0, 170, 255, 0.3);
      }
      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 0 30px rgba(0, 170, 255, 0.5);
      }
      .btn-secondary {
        background: transparent;
        color: var(--text-primary);
        border: 1px solid var(--glass-border);
      }
      .btn-secondary:hover {
        background: var(--social-hover-bg);
        border-color: var(--accent-primary);
      }
      /* --- NAVBAR STYLES END --- */

      /* Header */
      .header-right {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: 20px;
        padding: 6px 12px;
        font-size: 12px;
        color: var(--text-secondary);
      }

      .status-dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background: var(--success-color);
        animation: pulse-dot 2s infinite;
      }

      @keyframes pulse-dot {
        0%,
        100% {
          opacity: 1;
          transform: scale(1);
        }
        50% {
          opacity: 0.5;
          transform: scale(1.2);
        }
      }

      /* Main Chat Container */
      .chat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        max-width: 900px;
        margin: 0 auto;
        width: 100%;
        position: relative;
      }

      .messages-container {
        flex: 1;
        padding: 32px 24px;
        overflow-y: auto;
        scroll-behavior: smooth;
      }

      /* Custom scrollbar */
      .messages-container::-webkit-scrollbar {
        width: 6px;
      }

      .messages-container::-webkit-scrollbar-track {
        background: transparent;
      }

      .messages-container::-webkit-scrollbar-thumb {
        background: var(--border-color);
        border-radius: 3px;
      }

      .messages-container::-webkit-scrollbar-thumb:hover {
        background: var(--text-muted);
      }

      /* Messages */
      .message {
        margin-bottom: 32px;
        animation: slideInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        opacity: 0;
        animation-fill-mode: forwards;
      }

      @keyframes slideInUp {
        from {
          opacity: 0;
          transform: translateY(30px) scale(0.95);
        }
        to {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      }

      .message-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
      }

      .avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        font-weight: 600;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
        position: relative;
      }

      .user-avatar {
        background: linear-gradient(135deg, var(--accent-tertiary), #0891b2);
        color: white;
      }

      .assistant-avatar {
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        color: white;
      }

      .avatar::after {
        content: "";
        position: absolute;
        top: -2px;
        left: -2px;
        right: -2px;
        bottom: -2px;
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        border-radius: 50%;
        z-index: -1;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .message:hover .avatar::after {
        opacity: 0.4;
      }

      .sender-name {
        font-weight: 600;
        color: var(--text-primary);
        font-size: 14px;
      }

      .timestamp {
        font-size: 11px;
        color: var(--text-muted);
        margin-left: auto;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .message:hover .timestamp {
        opacity: 1;
      }

      .message-content {
        margin-left: 44px;
        font-size: 15px;
        line-height: 1.7;
        color: var(--text-secondary);
      }

      .user-message .message-content {
        background: var(--glass-bg);
        backdrop-filter: blur(15px);
        border: 1px solid var(--glass-border);
        border-radius: 18px;
        padding: 18px 22px;
        position: relative;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        color: var(--text-primary);
      }

      .user-message .message-content::before {
        content: "";
        position: absolute;
        top: -1px;
        left: -1px;
        right: -1px;
        bottom: -1px;
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        border-radius: 18px;
        z-index: -1;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .user-message:hover .message-content::before {
        opacity: 0.15;
      }

      .assistant-message .message-content {
        margin-left: 44px;
        color: var(--text-secondary);
      }

      /* Message formatting */
      .message-content h1,
      .message-content h2,
      .message-content h3 {
        color: var(--text-primary);
        margin: 16px 0 8px 0;
      }

      .message-content h1 {
        font-size: 18px;
      }
      .message-content h2 {
        font-size: 16px;
      }
      .message-content h3 {
        font-size: 14px;
      }

      .message-content p {
        margin: 8px 0;
      }

      .message-content code {
        background: var(--tertiary-bg);
        color: var(--accent-secondary);
        padding: 2px 6px;
        border-radius: 4px;
        font-family: "Fira Code", monospace;
        font-size: 0.9em;
      }

      .message-content pre {
        background: var(--tertiary-bg);
        border: 1px solid var(--glass-border);
        border-radius: 8px;
        padding: 16px;
        overflow-x: auto;
        margin: 16px 0;
      }

      .message-content pre code {
        background: none;
        padding: 0;
      }

      /* Loading States */
      .loading-message {
        display: flex;
        align-items: center;
        gap: 12px;
        color: var(--text-muted);
        font-style: italic;
      }

      .loading-dots {
        display: flex;
        gap: 4px;
      }

      .loading-dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background: var(--accent-primary);
        animation: loadingPulse 1.5s infinite ease-in-out;
      }

      .loading-dot:nth-child(2) {
        animation-delay: 0.3s;
      }
      .loading-dot:nth-child(3) {
        animation-delay: 0.6s;
      }

      @keyframes loadingPulse {
        0%,
        20%,
        100% {
          opacity: 0.3;
          transform: scale(1);
        }
        50% {
          opacity: 1;
          transform: scale(1.3);
        }
      }

      /* Error Messages */
      .error-message {
        background: linear-gradient(
          135deg,
          rgba(255, 71, 87, 0.1),
          rgba(220, 38, 38, 0.1)
        );
        border: 1px solid rgba(255, 71, 87, 0.3);
        border-radius: 12px;
        padding: 16px;
        margin: 16px 0;
        display: flex;
        align-items: flex-start;
        gap: 12px;
      }

      .error-icon {
        color: var(--error-color);
        font-size: 18px;
        flex-shrink: 0;
        margin-top: 2px;
      }

      .error-content {
        flex: 1;
      }

      .error-title {
        color: var(--error-color);
        font-weight: 600;
        margin-bottom: 4px;
      }

      .error-text {
        color: #fca5a5;
        font-size: 14px;
      }

      /* Input Container */
      .input-container {
        background: var(--glass-bg);
        backdrop-filter: blur(25px);
        border-top: 1px solid var(--glass-border);
        padding: 20px 24px;
        position: sticky;
        bottom: 0;
        z-index: 50;
      }

      .input-wrapper {
        max-width: 900px;
        margin: 0 auto;
        position: relative;
      }

      .input-box {
        display: flex;
        align-items: flex-end;
        background: var(--glass-bg);
        backdrop-filter: blur(20px);
        border: 2px solid var(--glass-border);
        border-radius: 24px;
        padding: 14px 18px;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: var(--shadow-primary);
        position: relative;
        overflow: hidden;
      }

      .input-box::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: -1;
      }

      .input-box:focus-within {
        border-color: var(--accent-primary);
        box-shadow: 0 0 0 4px rgba(0, 170, 255, 0.25), var(--shadow-secondary);
        transform: translateY(-2px);
      }

      .input-box:focus-within::before {
        opacity: 0.08;
      }

      .file-input {
        display: none;
      }

      .input-button {
        background: transparent;
        color: var(--text-muted);
        border: none;
        border-radius: 12px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        flex-shrink: 0;
        position: relative;
      }

      .input-button:hover {
        background: rgba(0, 170, 255, 0.1);
        color: var(--accent-primary);
        transform: scale(1.1);
      }

      .input-button:active {
        transform: scale(0.95);
      }

      .message-input {
        flex: 1;
        border: none;
        outline: none;
        font-size: 16px;
        line-height: 1.5;
        resize: none;
        background: transparent;
        min-height: 28px;
        max-height: 120px;
        padding: 8px 12px;
        font-family: inherit;
        color: var(--text-primary);
        font-weight: 400;
      }

      .message-input::placeholder {
        color: var(--text-muted);
        font-weight: 300;
      }

      .input-actions {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-left: 8px;
      }

      .send-button {
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        color: white;
        border: none;
        border-radius: 16px;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        flex-shrink: 0;
        box-shadow: 0 4px 20px rgba(0, 170, 255, 0.5);
        position: relative;
        overflow: hidden;
      }

      .send-button::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        transition: all 0.6s ease;
        transform: translate(-50%, -50%);
      }

      .send-button:hover:not(:disabled) {
        background: linear-gradient(
          135deg,
          var(--accent-secondary),
          var(--accent-primary)
        );
        transform: scale(1.08) rotate(15deg);
        box-shadow: 0 8px 30px rgba(0, 170, 255, 0.7);
      }

      .send-button:hover:not(:disabled)::before {
        width: 100%;
        height: 100%;
      }

      .send-button:active:not(:disabled) {
        transform: scale(0.95) rotate(15deg);
      }

      .send-button:disabled {
        background: var(--tertiary-bg);
        cursor: not-allowed;
        transform: scale(1) rotate(0deg);
        box-shadow: none;
      }

      .send-icon {
        transition: all 0.3s ease;
        z-index: 1;
      }

      .send-button:hover:not(:disabled) .send-icon {
        transform: scale(1.1);
      }

      /* Welcome Screen */
      .welcome-screen {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 60px 40px;
        color: var(--text-secondary);
        animation: fadeInUp 1.2s ease-out;
      }

      .welcome-icon {
        width: 80px;
        height: 80px;
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 36px;
        color: white;
        margin-bottom: 32px;
        animation: floatWelcome 4s ease-in-out infinite;
        box-shadow: var(--shadow-secondary);
        position: relative;
      }

      .welcome-icon::after {
        content: "";
        position: absolute;
        top: -4px;
        left: -4px;
        right: -4px;
        bottom: -4px;
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        border-radius: 24px;
        z-index: -1;
        opacity: 0.4;
        animation: pulse 3s infinite;
      }

      @keyframes floatWelcome {
        0%,
        100% {
          transform: translateY(0px) rotate(0deg);
        }
        50% {
          transform: translateY(-12px) rotate(3deg);
        }
      }

      @keyframes pulse {
        0%,
        100% {
          transform: scale(1);
          opacity: 0.4;
        }
        50% {
          transform: scale(1.05);
          opacity: 0.6;
        }
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .welcome-title {
        font-size: 32px;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 12px;
        background: linear-gradient(
          135deg,
          var(--accent-primary),
          var(--accent-secondary)
        );
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .welcome-subtitle {
        font-size: 18px;
        margin-bottom: 40px;
        max-width: 500px;
        font-weight: 300;
        opacity: 0.9;
      }

      .prompt-suggestions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 12px;
        margin-top: 20px;
        max-width: 600px;
        width: 100%;
      }

      .prompt-chip {
        background: var(--glass-bg);
        backdrop-filter: blur(15px);
        border: 1px solid var(--glass-border);
        border-radius: 16px;
        padding: 14px 20px;
        font-size: 14px;
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        font-weight: 500;
      }

      .prompt-chip::before {
        content: "";
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(0, 170, 255, 0.1),
          transparent
        );
        transition: left 0.8s ease;
      }

      .prompt-chip:hover {
        background: rgba(0, 170, 255, 0.15);
        border-color: var(--accent-primary);
        color: var(--text-primary);
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 8px 25px rgba(0, 170, 255, 0.3);
      }

      .prompt-chip:hover::before {
        left: 100%;
      }

      /* Responsive Design */
      @media (max-width: 992px) {
        .nav-menu,
        .nav-actions .btn-secondary,
        .nav-actions .btn-primary {
          display: none;
        }
        .mobile-toggle {
          display: flex;
        }
        .nav-menu.active {
          display: flex;
          flex-direction: column;
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          background: var(--glass-bg);
          backdrop-filter: blur(25px);
          border-bottom: 1px solid var(--glass-border);
          padding: 1rem 2rem;
          gap: 1rem;
          box-shadow: var(--shadow-primary);
        }
      }

      @media (max-width: 768px) {
        .navbar {
          padding: 12px 16px;
        }

        .header-right {
          gap: 8px;
        }

        .status-indicator {
          display: none;
        }

        .messages-container {
          padding: 20px 16px;
        }

        .input-container {
          padding: 16px;
        }

        .welcome-screen {
          padding: 40px 20px;
        }

        .welcome-title {
          font-size: 24px;
        }

        .welcome-subtitle {
          font-size: 16px;
        }

        .prompt-suggestions {
          grid-template-columns: 1fr;
        }

        .message-content,
        .user-message .message-content,
        .assistant-message .message-content {
          margin-left: 0;
        }
      }
    </style>
  </head>
  <body>
    <div class="bg-decoration">
      <div class="bg-particle"></div>
      <div class="bg-particle"></div>
      <div class="bg-particle"></div>
      <div class="bg-particle"></div>
      <div class="bg-particle"></div>
    </div>

    <div class="bg-grid"></div>

    <div class="scan-line"></div>

    <nav class="navbar">
      <div class="nav-container">
        <div class="nav-logo-container">
          <div class="title">Trade Master Pro</div>
        </div>

        <div class="nav-menu" id="navMenu">
                <a href="#home" class="nav-link active">Home</a>
                <a href="#dashboard" class="nav-link">Dashboard</a>
                <a href="#analytics" class="nav-link">Trading</a>
                <a href="#ai-chatbot" class="nav-link">AI Assistant</a>
                <a href="#games" class="nav-link">Daily Quiz</a>
                <a href="#courses" class="nav-link">Courses</a>
        </div>

        <div class="nav-actions">
          <div class="status-indicator" style="margin-right: 1rem">
            <div class="status-dot"></div>
            <span>Online</span>
          </div>
          <button class="btn-secondary">Sign In</button>
          <button class="btn-primary">Get Started</button>
          <div class="mobile-toggle" id="mobileToggle">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </div>
        </div>
      </div>
    </nav>

    <div class="chat-container">
      <div class="messages-container" id="messagesContainer">
        <div class="welcome-screen" id="welcomeScreen">
          <div class="welcome-icon">🤖</div>
          <h1 class="welcome-title">Welcome to Trade Master Pro AI</h1>
          <p class="welcome-subtitle">
            Your trading co-pilot, engineered to find your edge. Ask me
            anything – from backtesting a new strategy and analyzing technical
            indicators to staying ahead of market-moving news.
          </p>
          <div class="prompt-suggestions">
            <div class="prompt-chip">🤖 AI Trading Assistant</div>
            <div class="prompt-chip">📝 Smart Alerts</div>
            <div class="prompt-chip">💻 Recommendations of Expert Courses</div>
            <div class="prompt-chip">📈 Market Signal Tracker</div>
          </div>
        </div>
      </div>

      <div class="input-container">
        <div class="input-wrapper">
          <div class="input-box">
            <input
              type="file"
              class="file-input"
              id="fileInput"
              multiple
              accept="image/*,.pdf,.txt,.docx"
            />
            <button class="input-button" type="button" title="Attach file">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"
                />
              </svg>
            </button>
            <textarea
              class="message-input"
              id="messageInput"
              placeholder="Ask anything ..."
              rows="1"
            ></textarea>
            <div class="input-actions">
              <button class="input-button" title="Voice input">
                <svg
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="m12 1 0 22" />
                  <path d="m17 5h-10" />
                  <path d="m19 9h-14" />
                  <path d="m20 13h-16" />
                  <path d="m18 17h-12" />
                </svg>
              </button>
            </div>
            <button class="send-button" id="sendButton" disabled>
              <svg
                class="send-icon"
                width="22"
                height="22"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path d="M22 2L11 13" />
                <path d="M22 2L15 22L11 13L2 9L22 2Z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // --- NAVBAR SCRIPT START ---
      function initNavbar() {
        const mobileToggle = document.getElementById("mobileToggle");
        const navMenu = document.getElementById("navMenu");

        if (mobileToggle) {
          mobileToggle.addEventListener("click", () => {
            navMenu.classList.toggle("active");
          });
        }
      }

      function initNavLinks() {
        const navLinks = document.querySelectorAll(".nav-link");
        const navMenu = document.getElementById("navMenu");

        navLinks.forEach((link) => {
          link.addEventListener("click", (e) => {
            e.preventDefault();
            navLinks.forEach((l) => l.classList.remove("active"));
            link.classList.add("active");
            if (navMenu.classList.contains("active")) {
              navMenu.classList.remove("active");
            }
          });
        });
      }
      // --- NAVBAR SCRIPT END ---

      // Configuration
      const API_BASE_URL = "https://hackathon-pflh.onrender.com";

      // DOM elements
      const messageInput = document.getElementById("messageInput");
      const sendButton = document.getElementById("sendButton");
      const messagesContainer = document.getElementById("messagesContainer");
      const welcomeScreen = document.getElementById("welcomeScreen");
      const fileInput = document.getElementById("fileInput");
      const fileButton = document.querySelector(".input-button");

      // State
      let isLoading = false;
      let messageCount = 0;

      // Auto-resize textarea
      messageInput.addEventListener("input", function () {
        this.style.height = "auto";
        this.style.height = Math.min(this.scrollHeight, 120) + "px";
        updateSendButton();
      });

      // Update send button state
      function updateSendButton() {
        const hasText = messageInput.value.trim() !== "";
        sendButton.disabled = !hasText || isLoading;

        if (hasText && !isLoading) {
          sendButton.style.transform = "scale(1.05)";
        } else {
          sendButton.style.transform = "scale(1)";
        }
      }

      // File attachment
      fileButton.addEventListener("click", () => fileInput.click());

      fileInput.addEventListener("change", (e) => {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
          const fileNames = files.map((f) => f.name).join(", ");
          showNotification(
            `📎 ${files.length} file(s) selected: ${fileNames}`,
            "info"
          );
        }
      });

      // Notification system
      function showNotification(message, type = "info") {
        const notification = document.createElement("div");
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        background: var(--glass-bg);
        backdrop-filter: blur(20px);
        border: 1px solid var(--glass-border);
        border-radius: 12px;
        padding: 12px 16px;
        color: var(--text-primary);
        font-size: 14px;
        font-weight: 500;
        z-index: 1000;
        animation: slideInRight 0.3s ease;
        box-shadow: var(--shadow-primary);
        max-width: 300px;
      `;

        if (type === "error") {
          notification.style.borderColor = "var(--error-color)";
          notification.style.background = "rgba(255, 71, 87, 0.1)";
        } else if (type === "success") {
          notification.style.borderColor = "var(--success-color)";
          notification.style.background = "rgba(46, 213, 115, 0.1)";
        }

        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
          notification.style.animation = "slideOutRight 0.3s ease";
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }

      // API call to backend
      async function callGeminiAPI(prompt) {
        try {
          const response = await fetch(
            `${API_BASE_URL}/ask/?prompt=${encodeURIComponent(prompt)}`,
            {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.detail || `HTTP error! status: ${response.status}`
            );
          }

          const data = await response.json();
          return data.response;
        } catch (error) {
          console.error("API call failed:", error);
          if (error.name === "TypeError" && error.message.includes("fetch")) {
            throw new Error(
              "Unable to connect to server. Please ensure the backend is running."
            );
          }
          throw error;
        }
      }

      // Send message function
      async function sendMessage() {
        const message = messageInput.value.trim();
        if (message === "" || isLoading) return;

        isLoading = true;
        updateSendButton();

        if (welcomeScreen.style.display !== "none") {
          welcomeScreen.style.display = "none";
        }

        addMessage(message, "user");
        messageInput.value = "";
        messageInput.style.height = "auto";

        const loadingMessageId = addLoadingMessage();

        try {
          const response = await callGeminiAPI(message);
          removeMessage(loadingMessageId);
          addMessage(response, "assistant");
          updateStatus("success");
        } catch (error) {
          removeMessage(loadingMessageId);
          addErrorMessage(error.message);
          updateStatus("error");
          showNotification("Failed to get AI response", "error");
        } finally {
          isLoading = false;
          updateSendButton();
        }
      }

      // Add message to chat
      function addMessage(text, sender) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message", `${sender}-message`);
        messageElement.id = generateMessageId();
        messageElement.style.animationDelay = `${messageCount * 0.1}s`;
        const now = new Date();
        const timeString = now.toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });

        messageElement.innerHTML = `
        <div class="message-header">
          <div class="avatar ${sender}-avatar">${
          sender === "user" ? "U" : "F"
        }</div>
          <div class="sender-name">${
            sender === "user" ? "You" : "Futuro"
          }</div>
          <div class="timestamp">${timeString}</div>
        </div>
        <div class="message-content">${formatMessage(text)}</div>
      `;

        messagesContainer.appendChild(messageElement);
        messageCount++;
        scrollToBottom();
        return messageElement.id;
      }

      function addLoadingMessage() {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message", "assistant-message");
        messageElement.id = generateMessageId();
        const now = new Date();
        const timeString = now.toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });

        messageElement.innerHTML = `
        <div class="message-header">
          <div class="avatar assistant-avatar">F</div>
          <div class="sender-name">Futuro</div>
          <div class="timestamp">${timeString}</div>
        </div>
        <div class="message-content">
          <div class="loading-message">
            <div class="loading-dots">
              <div class="loading-dot"></div>
              <div class="loading-dot"></div>
              <div class="loading-dot"></div>
            </div>
            <span>Thinking...</span>
          </div>
        </div>
      `;

        messagesContainer.appendChild(messageElement);
        scrollToBottom();
        return messageElement.id;
      }

      function addErrorMessage(errorText) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message", "assistant-message");
        messageElement.id = generateMessageId();
        const now = new Date();
        const timeString = now.toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });

        messageElement.innerHTML = `
        <div class="message-header">
          <div class="avatar assistant-avatar">F</div>
          <div class="sender-name">Futuro</div>
          <div class="timestamp">${timeString}</div>
        </div>
        <div class="message-content">
          <div class="error-message">
            <div class="error-icon">⚠️</div>
            <div class="error-content">
              <div class="error-title">Unable to Process Request</div>
              <div class="error-text">${errorText}</div>
            </div>
          </div>
        </div>
      `;

        messagesContainer.appendChild(messageElement);
        scrollToBottom();
        return messageElement.id;
      }

      function removeMessage(messageId) {
        const messageElement = document.getElementById(messageId);
        if (messageElement) {
          messageElement.style.animation = "fadeOut 0.3s ease";
          setTimeout(() => messageElement.remove(), 300);
        }
      }

      function formatMessage(text) {
        return text
          .replace(/\n/g, "<br>")
          .replace(/\*\*\*(.*?)\*\*\*/g, "<strong><em>$1</em></strong>")
          .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
          .replace(/\*(.*?)\*/g, "<em>$1</em>")
          .replace(/`([^`]+)`/g, "<code>$1</code>")
          .replace(/```([^`]+)```/g, "<pre><code>$1</code></pre>")
          .replace(/^# (.*$)/gm, "<h1>$1</h1>")
          .replace(/^## (.*$)/gm, "<h2>$1</h2>")
          .replace(/^### (.*$)/gm, "<h3>$1</h3>");
      }

      function generateMessageId() {
        return (
          "msg-" + Date.now() + "-" + Math.random().toString(36).substr(2, 9)
        );
      }

      function scrollToBottom() {
        const scrollHeight = messagesContainer.scrollHeight;
        const height = messagesContainer.clientHeight;
        const maxScrollTop = scrollHeight - height;
        messagesContainer.scrollTo({
          top: maxScrollTop > 0 ? maxScrollTop : 0,
          behavior: "smooth",
        });
      }

      function updateStatus(status) {
        const statusDot = document.querySelector(".status-dot");
        const statusText = document.querySelector(".status-indicator span");
        if (!statusDot || !statusText) return;

        if (status === "success") {
          statusDot.style.background = "var(--success-color)";
          statusText.textContent = "Online";
        } else if (status === "error") {
          statusDot.style.background = "var(--error-color)";
          statusText.textContent = "Error";
          setTimeout(() => {
            statusDot.style.background = "var(--success-color)";
            statusText.textContent = "Online";
          }, 3000);
        }
      }

      sendButton.addEventListener("click", sendMessage);

      messageInput.addEventListener("keydown", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });

      const promptChips = document.querySelectorAll(".prompt-chip");
      promptChips.forEach((chip) => {
        chip.addEventListener("click", () => {
          const text = chip.textContent.replace(/^[^\s]+\s/, "");
          messageInput.value = text;
          messageInput.dispatchEvent(new Event("input"));
          messageInput.focus();

          const ripple = document.createElement("div");
          ripple.style.cssText = `
          position: absolute;
          border-radius: 50%;
          background: rgba(0, 170, 255, 0.3);
          animation: ripple 0.6s ease-out;
          pointer-events: none;
        `;
          chip.style.position = "relative";
          chip.appendChild(ripple);
          setTimeout(() => ripple.remove(), 600);
        });
      });

      const style = document.createElement("style");
      style.textContent = `
      @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
      @keyframes fadeOut {
        from { opacity: 1; transform: scale(1); }
        to { opacity: 0; transform: scale(0.95); }
      }
      @keyframes ripple {
        from {
          width: 0; height: 0; opacity: 1; top: 50%; left: 50%;
          transform: translate(-50%, -50%);
        }
        to {
          width: 200px; height: 200px; opacity: 0; top: 50%; left: 50%;
          transform: translate(-50%, -50%);
        }
      }
    `;
      document.head.appendChild(style);

      // Initialize
      initNavbar();
      initNavLinks();
      updateSendButton();

      setTimeout(() => {
        if (messagesContainer.children.length === 1) {
          showNotification("👋 Welcome! Try asking me anything!", "info");
        }
      }, 2000);

      fetch(`${API_BASE_URL}/health`)
        .then((response) => response.json())
        .then(() => {
          showNotification("🚀 Connected to Futuro AI", "success");
          updateStatus("success");
        })
        .catch(() => {
          showNotification("⚠️ Backend not connected", "error");
          updateStatus("error");
        });
    </script>
  </body>
</html>